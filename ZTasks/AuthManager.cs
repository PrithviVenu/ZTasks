using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Security.Authentication.Web;
using Windows.Security.Credentials;
using Windows.Web.Http;
using Windows.Web.Http.Filters;
using Windows_SsoFramework.Zoho.Accounts;
using Windows_SsoFramework.Zoho.Accounts.Util;

namespace ZTasks
{
    public class AuthManager
    {
        //protected static readonly ILogger Logger = LogManager.GetLogger();

        public static readonly ZSSOKit IAMSSOKit = ZSSOKit.GetInstance();
        public static Dictionary<string, bool> LogOutHandled = new Dictionary<string, bool>();
        public static object LogOutHandledLock = new object();

        /// <summary>
        /// To initialize <see cref="IAMSSOKit"/> instance<para/>
        /// This must be called as first item after launch of the app
        /// </summary>
        /// <param name="clientId">App client ID</param>
        /// <param name="redirectUri">App redirect URI</param>
        /// <param name="scopes">Additional comma separated scopes if required any for this session</param>
        /// <param name="ssoBuildType">Specifies the build type of IAM SSO library</param>
        /// <param name="isDevMode">Set to true for developement mode; otherwise, false</param>
        /// <param name="showLogs">Set to true to show the log messages generated by the library in developement mode; otherwise, false</param>
        /// <param name="sharedSecret">Used by the IAM SSO library for some encryption purposes.
        /// Check with them to confirm whether you need to pass this parameter.</param>
        /// <returns></returns>
        public static async Task InitializeSSOKit(string clientId, string redirectUri, string scopes, ZBuildType ssoBuildType,
            bool isDevMode, bool showLogs, string sharedSecret = null)
        {
            // If sharedSecret is null or empty, don't send that as parameter of ZSSOKit.InitAsync()
            if (string.IsNullOrEmpty(sharedSecret))
            {
                await ZSSOKit.InitAsync(clientId, redirectUri, scopes, ssoBuildType, isDevMode, showLogs);
            }
            else
            {
                await ZSSOKit.InitAsync(clientId, redirectUri, scopes, ssoBuildType, isDevMode, showLogs, sharedSecret);
            }
        }

        /// <summary>To store IMAP password of the current user in local <see cref="PasswordVault"/></summary>
        /// <param name="id">IMAP account ID</param>
        /// <param name="imapPassword">IMAP password</param>
        public static void SaveIMAPPassword(string id, string imapPassword)
        {
            var passwordVault = new PasswordVault();
            var credentials = new PasswordCredential("AUTHTOKEN_" + id, id, imapPassword); //No I18N
            passwordVault.Add(credentials);
        }

        /// <summary>To get IMAP Password from local <see cref="PasswordVault"/> for the given <paramref name="id"/></summary>
        /// <param name="id">IMAP account ID to get IMAP password</param>
        /// <returns>IMAP Password for the given IMAP <paramref name="id"/></returns>
        public static string GetIMAPPassword(string id)
        {
            string password = string.Empty;
            var passwordVault = new PasswordVault();
            try
            {
                PasswordCredential credentials = passwordVault.Retrieve("AUTHTOKEN_" + id, id); // No I18N
                password = credentials?.Password;
            }
            catch (Exception ex)
            {
                //Logger.Fatal(LogManager.GetCallerInfo(), "Error in retrieving auth data for ZUID: {0}. Exception: {1}", new object[] { id, ex.Message });
            }

            return password;
        }

        /// <summary>Removes the IMAP Password from local <see cref="PasswordVault"/> for the given IMAP account ID</summary>
        /// <param name="id">IMAP account ID to remove the password</param>
        /// <remarks>NOTE: This method does NOT logout the user from server, it just removes the password form local vault.</remarks>
        public static void RemoveIMAPPassword(string id)
        {
            string imappassword = GetIMAPPassword(id);
            var passwordVault = new PasswordVault();
            passwordVault.Remove(new PasswordCredential("AUTHTOKEN_" + id, id, imappassword)); //No I18N
        }

        /// <summary>To get oauth token from library for the current user/></summary>
        /// <returns>OAuth token for the current user/></returns>
        public static async Task<string> GetAuthTokenAsync(string zuid, bool updateSSOCurrentUser = true) // TODO: Change it to GetOAuthAsync()
        {
            string oAuthToken = string.Empty;
            try
            {
                if (!string.IsNullOrEmpty(zuid))
                {
                    UserData userData = null;
                    try
                    {
                        userData = IAMSSOKit.GetUserData(zuid, updateSSOCurrentUser);
                    }
                    catch (Exception ex)
                    {
                        //Logger.Error(LogManager.GetCallerInfo(), "While getting oAuth UserData is null for ZUID: {0}", new object[] { zuid });
                        throw ex;
                    }

                    if (userData != null)
                    {
                        ZToken token = await userData.GetTokenAsync().ConfigureAwait(false);

                        if (token.Status == ZSSOErrorCodes.ok)
                        {
                            oAuthToken = token.Token;
                        }
                        else if (token.Status == ZSSOErrorCodes.invalidMobileCode)
                        {
                            // Invalid session
                            bool isLogOutSuccess = await userData.LogoutAndRemoveAsync();
                            if (isLogOutSuccess)
                            {
                                lock (LogOutHandledLock)
                                {
                                    if (!LogOutHandled.ContainsKey(zuid))
                                    {
                                        LogOutHandled.Add(zuid, false);
                                        //CommonNotifications.NotifyUserLoggedOut(zuid);
                                    }
                                }
                            }
                            else
                            {
                                throw new Exception("Failed to logout");
                            }
                        }
                        else
                        {
                            throw token.Exception;
                        }
                    }
                    else
                    {
                        lock (LogOutHandledLock)
                        {
                            if (!LogOutHandled.ContainsKey(zuid))
                            {
                                LogOutHandled.Add(zuid, false);
                                //CommonNotifications.NotifyUserLoggedOut(zuid);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //Logger.Fatal(LogManager.GetCallerInfo(), "Error in retreiving oAuth token for ZUID: {0}. Exception: {1}", new object[] { zuid, ex.Message });
                throw ex;
            }

            return oAuthToken;
        }

        /// <summary>To check and logout the specified user if its oAuth token is no longer valid</summary>
        /// <param name="zuid">ZUID of a Zoho user to validate the oAuth token</param>
        /// <returns>true when the oAuth token of the user is no longer valid, false when the token is still valid, null in case of any exception</returns>
        public static async Task<bool?> CheckAndLogOutAsync(string zuid)
        {
            UserData userData = IAMSSOKit.GetUserData(zuid, false);
            return await userData.CheckAndLogoutAsync().ConfigureAwait(false);
        }

        /// <summary>To logout a user</summary>
        /// <param name="zuid">ZUID of a user to log out</param>
        /// <returns>Log out status</returns>
        public static async Task<bool> LogOutAsync(string zuid)
        {
            UserData userData = IAMSSOKit.GetUserData(zuid, false);
            return await userData.LogoutAndRemoveAsync().ConfigureAwait(false);
        }

        /// <summary>
        /// To check whether user session (oAuth token) of the specified user is still valid or not<para/>
        /// If the session is no longer valid, then the user will be logged out from the server</summary>
        /// <param name="zuid">ZUID of a Zoho user to logout</param>
        public static async Task<bool> IsSessionInvalid(string zuid)
        {
            UserData userData = IAMSSOKit.GetUserData(zuid, false);
            bool? isSessionInvalid = await userData.CheckAndLogoutAsync().ConfigureAwait(false); // await CheckAndLogOutAsync(zuid).ConfigureAwait(false);
            return isSessionInvalid.HasValue && isSessionInvalid.Value;
        }
    }
}